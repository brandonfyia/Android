package com.example.java1week2_4;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import android.content.Context;
import android.util.Log;

public class FileStuff {
	
	private static FileStuff fileStuffInstance = null;
	
	protected FileStuff(){
	}
	
	public static FileStuff getFileStuffInstance(){
		if (null == fileStuffInstance)
		{
			fileStuffInstance = new FileStuff();
		}
		return fileStuffInstance;
	}
	
	//Store String file
	@SuppressWarnings("resource")
	public static Boolean storeStringFile(Context context, String fileName, String content, boolean external){
		try {
			File file;
			FileOutputStream fos;
			if (external) {
				file = new File(context.getExternalFilesDir(null), fileName);
				fos = new FileOutputStream(file);
			} else {
				fos = context.openFileOutput(fileName, Context.MODE_PRIVATE);
			}
			fos.write(content.getBytes());
			fos.close();
		} catch (IOException e) {
			Log.e("WRITE ERROR", fileName);
		}
		return true;
	}
	//Store object
	@SuppressWarnings("resource")
	public Boolean storeObjectFile(Context context, String fileName, Object content, Boolean external){
		try {
			File file;
			FileOutputStream fos;
			ObjectOutputStream oos;
			if (external) {
				file = new File(context.getExternalFilesDir(null), fileName);
				fos = new FileOutputStream(file);
			} else {
				fos = context.openFileOutput(fileName, Context.MODE_PRIVATE);
			}
			oos = new ObjectOutputStream(fos);
			oos.writeObject(content);
			oos.close();
			fos.close();
		} catch (IOException e) {
			Log.e("WRITE ERROR", fileName);
		}
		return true;
	}
	
	//Read String File
	@SuppressWarnings("resource")
	public static String readStringFile(Context context, String fileName, Boolean external){
		String content = "";
		try {
			File file;
			FileInputStream fin;
			if (external) {
				file = new File(context.getExternalFilesDir(null), fileName);
				fin = new FileInputStream(file);
			} else {
				file = new File(fileName);
				fin = context.openFileInput(fileName);
			}
			BufferedInputStream bin= new BufferedInputStream(fin);
			byte[] contentBytes = new byte[1024];
			int bytesRead = 0;
			StringBuffer contentBuffer = new StringBuffer();
			
			while((bytesRead = bin.read(contentBytes)) != -1){
				content = new String(contentBytes, 0, bytesRead);
				contentBuffer.append(content);
			}
			content = contentBuffer.toString();
			fin.close();
		} catch (FileNotFoundException e) {
			Log.e("READ ERROR", "FILE NOT FOUND "+ fileName);
		} catch (IOException e) {
			Log.e("READ ERROR", "I/O ERROR");
		}
		return content;
	}
	
	//Read object file
	@SuppressWarnings("resource")
	public static Object readObjectFile(Context context, String fileName, Boolean external){
		Object content = new Object();
		try {
			File file;
			FileInputStream fin;
			if (external) {
				file = new File(context.getExternalFilesDir(null), fileName);
				fin = new FileInputStream(file);
			} else {
				file = new File(fileName);
				fin = context.openFileInput(fileName);
			}
			ObjectInputStream ois = new ObjectInputStream(fin);
			try {
				content = (Object) ois.readObject();
			} catch (ClassNotFoundException e) {
				Log.e("READ ERROR", "INVALID JAVA OBJECT FILE");
			}
			ois.close();
			fin.close();
		} catch (FileNotFoundException e) {
			Log.e("READ ERROR", "FILE NOT FOUND "+ fileName);
			return null;
		} catch (IOException e) {
			Log.e("READ ERROR", "I/O ERROR");
		}
		return content;
	}
}
