package services;

import java.io.BufferedInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;

import org.json.JSONException;
import org.json.JSONObject;

import com.example.java1week2_4.FileStuff;
import com.example.java1week2_4.MainActivity.QuoteRequest;
import com.example.lib.WebStuff;

import android.app.IntentService;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;

public class HTTP extends IntentService{
	
	public HTTP(){
		super("HTTP");
	}

	@Override
	protected void onHandleIntent(Intent intent) {
		
		//Global variables
		String _movieName = null;
		
		// Build URL
			String baseURL = "http://api.rottentomatoes.com/api/public/v1.0/movies.json?apikey=zns9a4f2hfm94ju3unu4axzk&q=";
			String qs;
			try {
				qs = URLEncoder.encode(_movieName, "UTF-8");
			} catch (Exception e) {
				Log.e("BAD URL", "ENCODING PROBLEM");
				qs = "";
			}
			// Send URl to Async Task
			URL finalURL;
			try {
				finalURL = new URL(baseURL + qs + "&page_limit=1");
				QuoteRequest qr = new QuoteRequest();
				qr.execute(finalURL);
			} catch (MalformedURLException e) {
				Log.e("BAD URL", "MALFORMED URL");
				finalURL = null;
			}
		

		// Send URL to web stuff to pull data
		class QuoteRequest extends AsyncTask<URL, Void, String> {
			@Override
			protected String doInBackground(URL... urls) {
				String response = "";
				for (URL url : urls) {
					response = WebStuff.getURLStringResponse(url);
				}
				return response;
			}

			@Override
			protected void onPostExecute(String result) {
				try {
					// Set data
					Log.i("JSON", result);
					JSONObject resultJSON = new JSONObject(result);
					try {
						/*
						 * JSON Array is Movies. object 0 is the first result. get
						 * string provides the detail Object.
						 */

						if (resultJSON.getString("total").toString().compareTo("0") == 0) {
							Toast toast = Toast.makeText(_context,
									"No movie by that name exists",
									Toast.LENGTH_LONG);
							toast.show();
							_header.setText("Try Again");
						} else {
							_json = resultJSON.getJSONArray("movies")
									.getJSONObject(0);
							// Store object in external memory
							FileStuff.getFileStuffInstance().storeObjectFile(
									_context, "Movie", _json.toString(), true);
							// Set Text Values
							_searchField.setText(_json.getString("title")
									.toString());
							_results.setText("");
							_header.setText("Movie Found!");
						}
					} catch (JSONException e) {
						Log.e("JSON", "JSON OBJECT EXCEPTION");
						_results.setText("No info found. Please double check that the movie title was entered correctly");
					}
				} catch (JSONException e) {
					Log.e("JSON", "JSON OBJECT EXCEPTION");
					_results.setText("No info found. Please double check that the movie title was entered correctly");
				}
			}
		}

	}

}
